#" SETTINGS "{{{
#" vim:foldmethod=marker:foldlevel=0
#" ---------------------------------------------------------------------
set -g default-terminal "xterm-256color"
set -ga terminal-overrides ",xterm-256color:Tc"

setw -g xterm-keys on
set -s escape-time 10                     # faster command sequences
set -sg repeat-time 200                   # increase repeat timeout
set -s focus-events on
set -g mouse on
set -g history-limit 5000                 # boost history

set -q -g status-utf8 on                  # expect UTF-8 (tmux < 2.2)
setw -q -g utf8 on

# Display
set -g base-index 1           # start windows numbering at 1
setw -g pane-base-index 1     # make pane numbering consistent with windows
setw -g automatic-rename on   # rename window to reflect current program
set -g renumber-windows on    # renumber windows when a window is closed
set -g set-titles on          # set terminal title
set -g display-panes-time 800 # slightly longer pane indicators display time
set -g display-time 1000      # slightly longer status messages display time
set -g status-interval 10     # redraw status line every 10 seconds

# activity
set -g monitor-activity on
set -g visual-activity off
set -g bell-action none
set -g visual-bell off
set -g visual-silence off
#" ---------------------------------------------------------------------
#" }}}

#" BINDING "{{{
#" vim:foldmethod=marker:foldlevel=0
#" ---------------------------------------------------------------------
set -g prefix C-a                        # GNU-Screen compatible prefix
bind C-a send-prefix

# clear history
bind C-l send-keys C-l

# create session
bind C-c command-prompt -p \b(new-session)\b 'new-session -s "%%"'

#fzt
bind p run-shell -b 'fzt attach | exit 0'
bind t run-shell -b 'fzt kill | exit 0'

#switch-theme
bind v run-shell 'switch-theme light'
bind b run-shell 'switch-theme dark'

# split current window horizontally
bind _ split-window -v -c "#{pane_current_path}"
# split current window vertically
bind | split-window -h -c "#{pane_current_path}"
# new window current path
bind c new-window -c "#{pane_current_path}"

# pane navigation
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R
bind-key -T copy-mode-vi 'C-\' select-pane -l

bind > swap-pane -D       # swap current pane with the next one
bind < swap-pane -U       # swap current pane with the previous one

# maximize current pane
bind + run 'cut -c3- ~/.tmux.conf | sh -s _maximize_pane "#{session_name}" #D'

# pane resizing
bind -r H resize-pane -L 2
bind -r J resize-pane -D 2
bind -r K resize-pane -U 2
bind -r L resize-pane -R 2

# window navigation
unbind n
unbind-key l
unbind-key ;
# bind -r C-i previous-window # select previous window
# bind -r C-o next-window     # select next window
# bind Tab last-window        # move to last active window

# toggle mouse
bind m run "cut -c3- ~/.tmux.conf | sh -s _toggle_mouse"
# -- urlview -------------------------------------------------------------------
bind U run "cut -c3- ~/.tmux.conf | sh -s _urlview #{pane_id}"

# copy to X11 clipboard
if -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xsel -i -b"'
if -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1"'
# copy to macOS clipboard
if -b 'command -v pbcopy > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | pbcopy"'
if -b 'command -v reattach-to-user-namespace > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | reattach-to-user-namespace pbcopy"'
# copy to Windows clipboard
if -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b "tmux save-buffer - | clip.exe"'
if -b '[ -c /dev/clipboard ]' 'bind y run -b "tmux save-buffer - > /dev/clipboard"'
#" ---------------------------------------------------------------------
#" }}}

#" STATUSLINE "{{{
#" vim:foldmethod=marker:foldlevel=0
#" ---------------------------------------------------------------------
# ----------------------------=== Colorscheme ===--------------------------

# NOTE: you can use vars with $<var> and ${<var>} as long as the str is double quoted: ""
# WARNING: hex colors can't contain capital letters

# ----------------------------=== Theme ===--------------------------

# status
set -g status-position bottom
set -g status "on"
set -g status-bg "${thm_bg}"
set -g status-justify "left"
set -g status-left-length "100"
set -g status-right-length "100"

# messages
set -g message-style fg="${thm_white_br}",bg="${thm_gray}",align="centre"
set -g message-command-style fg="${thm_white_br}",bg="${thm_gray}",align="centre"

# panes
set -g pane-border-style fg="${thm_gray}"
set -g pane-active-border-style fg="${thm_blue_br}"

# windows
setw -g window-status-activity-style fg="${thm_fg}",bg="${thm_bg}",none
setw -g window-status-separator ""
setw -g window-status-style fg="${thm_fg}",bg="${thm_bg}",none

# --------=== Statusline
left_main_separator="\uE0B4"
left_sub_separator="\uE0B5"
right_main_separator="\uE0B6"
set -g status-left "#{?client_prefix,#[bg=$thm_red],#[bg=$thm_green_br]}#[fg=$thm_bg]   #S #{?client_prefix,#[fg=$thm_red],#[fg=$thm_green_br]}#[bg=$thm_gray]$left_main_separator#[fg=$thm_dark_fg,bg=$thm_gray] %d %b $left_sub_separator %R #[fg=$thm_gray,bg=$thm_bg]$left_main_separator "
set -g status-right "#[fg=$thm_fg]#(battstat tmux $thm_battery) #[fg=$thm_magenta,bg=$thm_bg,nobold,nounderscore,noitalics]$right_main_separator#[fg=$thm_bg,bg=$thm_magenta,nobold,nounderscore,noitalics] #[fg=$thm_dark_fg,bg=$thm_gray] #{pane_current_command} "

# current_dir
setw -g window-status-format "#[fg=$thm_bg,bg=$thm_blue]$left_main_separator #I#[fg=$thm_blue,bg=$thm_gray]$left_main_separator#[fg=$thm_dark_fg,bg=$thm_gray] #W#[fg=$thm_gray,bg=$thm_bg]$left_main_separator "
setw -g window-status-current-format "#[fg=$thm_bg,bg=$thm_orange]$left_main_separator #I#[fg=$thm_orange,bg=$thm_white]$left_main_separator#[fg=$thm_fg_gutter,bg=$thm_white] #W#[fg=$thm_white,bg=$thm_bg]$left_main_separator "

# parent_dir/current_dir
# setw -g window-status-format "#[fg=colour232,bg=colour111] #I #[fg=colour222,bg=colour235] #(echo "#{pane_current_path}" | rev | cut -d'/' -f-2 | rev) "
# setw -g window-status-current-format "#[fg=colour232,bg=colour208] #I #[fg=colour255,bg=colour237] #(echo "#{pane_current_path}" | rev | cut -d'/' -f-2 | rev) "

# --------=== Modes
setw -g clock-mode-colour "${thm_blue}"
setw -g mode-style "fg=${thm_yellow} bg=${thm_bg} bold"
#" ---------------------------------------------------------------------
#" }}}
